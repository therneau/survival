#
# Residuals from a coxph survival curve
#
# This functionality is currently in development, and this test fails.
#
library(survival)
aeq <- function(x,y, ...) all.equal(as.vector(x), as.vector(y), ...)

# A test using validation set 1
book1 <- data.frame(time=  c(9, 3,1,1,6,6,8),
                    status=c(1,NA,1,0,1,1,0),
                    x=     c(0, 2,1,1,1,0,0))
fit1 <- coxph(Surv(time, status) ~x, book1, ties='breslow')
s1 <- survfit(fit1, newdata = list(x=c(0, 1.5)), censor=FALSE)
test1 <- resid(s1, times=c(2,6,10), type="cumhaz")

aeq(dim(test1), c(6,3,2)) # 6 subjects, 3 time points, 2 Cox model curves

r <- (3 + sqrt(33))/2  # true risk score
aeq(coef(fit1), log(r))
denom <- c(3*r+3, r+3, 1)
haz <- c(1,2,1)/denom
chaz <- cumsum(haz)
xscale <- exp(c(0, 1.5) * log(r))
aeq(outer(chaz, xscale, '*'), s1$cumhaz)  # hazards for the two curves

# the dM part of the residual
risk <- c(1,r,r,r, 1, 1) # per subject risk
dN <- cbind(c(0,1,0,0,0,0), c(0, 0 ,0, 1, 1, 0), c(1, 0,0,0,0, 0))
ytime <- c(9, 1,1,6,6, 8)  # time values in the data
dH <- cbind(haz[1], ifelse(ytime <6, 0, haz[2]), ifelse(ytime <9, 0, haz[3]))
dM <- dN - risk*dH   # increments to the martingale residuals
aeq(rowSums(dM), fit1$resid)  # double check

# The hazard has increments at time 1, 6, and 9. 
# Mterm1[i,j] has the influence of observation i on the hazard increment at the
#  jth event time, for curve 1, first portion.  Mterm2 = second curve.
# Since there is only 1 subject at risk at time 9 the increment at time 9 is
#  guarranteed to be 1.0, hence all the derivatives are 0
Mterm1 <- dM %*% diag(1/denom) * xscale[1] 
Mterm2 <- dM %*% diag(1/denom) * xscale[2]

# the influence of beta
sresid <- resid(fit1, 'score')
vmat <- vcov(fit1)
aeq(s1$newdata$x, c(0, 1.5))  # verify
xbar <- c(r/(r+1), r/(r+3), 0)
Bterm1 <- sresid %*% vmat %*% ((xbar -0)*  haz) *xscale[1]
Bterm2 <- sresid %*% vmat %*% ((xbar -1.5)*haz)* xscale[2]

zz <-  sresid %*% vmat %*% cumsum((xbar -0)*  haz) *xscale[1]
IJ.haz <- array(c(Mterm1- Bterm1, Mterm2- Bterm2), dim=c(6,3,2))
IJ.cumhaz <- IJ.haz
IJ.cumhaz[,2,] <- IJ.cumhaz[,1,] + IJ.haz[,2,]
IJ.cumhaz[,3,] <- IJ.cumhaz[,2,] + IJ.haz[,3,]

aeq(test1, IJ.cumhaz)

test2 <- resid(s1, times=c(2,6,10), type="pstate")
aeq(test2, -IJ.cumhaz* rep(s1$surv, each=6))

# The AUC is a weighted sum.
# If A(0, t) is the AUC from 0 to t, and d_i is the set of event times < t
#     deriv = sum( -A(d_i, t) IJ.haz(d_i)) 
#           = sum((A(0,d_i)- A(0,t)) IJ.haz(d_i))

#  AUC at the event times, and the reporting times: 1,6, 9, 10
delta <- c(1, 5, 3, 1) #widths of intervals
surv <- summary(s1, time=c(0, 1, 6, 9))$surv
auc <- apply(delta*surv, 2, cumsum)     # two column matrix

wt1 <- pmin(auc[1:3,] - rep(auc[1,], each=3), 0) 
wt6 <- pmin(auc[1:3,] - rep(auc[2,], each=3), 0)
wt10<- pmin(auc[1:3,] - rep(auc[4,], each=3), 0)

# wt1 is all 0, no surprise as AUC(1)= 1 for any case weight
t1 <- IJ.haz[,,1] %*% cbind(wt1[,1], wt6[,1], wt10[,1]) #curve1
t2 <- IJ.haz[,,2] %*% cbind(wt1[,2], wt6[,2], wt10[,2]) #curve2
IJ.auc <- array(c(t1, t2), dim=c(6,3,2))
test3 <- resid(s1, times=c(2,6,10), type='pstate')
aeq(test3, IJ.auc)
